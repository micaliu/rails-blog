Description:
  This assignment help you get familiar with rails active record 
migration, association, validation and callback system.
  First, you need a rails project as a container to get the ball  
rolling. Build a new one or use the blog are both OK. 
  The assignment only involve the M(Modle) in MVC, so you don't have 
to care anything about Controller or View.
  You can test you code in Rails console. Remember every time you 
change your code, you should use "reload!" to synchronize the console with the changes. If you find something wrong with the console, try to restart it. 

Requirements:
1. Create Models and related migrations
1.1. Create UserRole model with the following attributes:
name: string, can not be blank

1.2. Create User model, it has the following attributes:
email: string, can not be blank, a valid email should be something like "xxx@xx.xx"
password: string, can not be blank, should contain more than 6 characters
user_role_id: as a reference of UserRole model.

1.3. Create UserInfo model with the following attributes:
firstname, lastname: string, can not be blank, only contain alphabets
profile: text, allow blank

1.4. Create Category model with the following attributes:
name: string, can not be blank

posts_count: integer, default 0

1.5. Create Tag model with the following attributes:
name: string, can not be blank

1.6. Create Post model with the following attributes:
title: string, can not be blank
content: text, allow blank
category_id: as a reference of Category model.
user_id: as a reference of User model. This column remember the author of the post.

1.7. Create PostTagRef model as a connection between Post and Tag with the following attibutes:
post_id: as a reference of Post model
tag_id: as a reference of Tag model

2. Validate each model's attributes according to description above.

3. Define relations between Models(refer BlogModel.png)

4. pay attention to the Category model posts_count column, this column is used for recording how many posts there are under the category. When a post is created under the category, its posts_count should increase 1. When a post is deleted, its category's posts_count should decrease 1. When a post is changing category from A to B, A's posts_count should decrease 1 and B's posts_count should increase 1.
Please implement it with active record callback facilities not the counter_cache option.

5. Create some seeds data in db/seeds.rb for testing relation.

(hint: for 4, refer http://codebeerstartups.com/2012/11/track-changes-in-your-active-record-object-using-dirty-objects-in-rails/ for how to know if an attribute is changed when update)
echo "# rails-blog" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/micaliu/rails-blog.git
git push -u origin master
